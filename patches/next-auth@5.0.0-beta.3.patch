diff --git a/lib/actions.js b/lib/actions.js
index 0c6c0df5475ea13aec4a79ac5177e7456e934366..5eaf531cf98d9832f2c52d8632a237f9c6dd39d6 100644
--- a/lib/actions.js
+++ b/lib/actions.js
@@ -1,6 +1,6 @@
 import { Auth, raw, skipCSRFCheck } from "@auth/core";
-import { headers as nextHeaders, cookies } from "next/headers";
-import { redirect } from "next/navigation";
+import { headers as nextHeaders, cookies } from "next/headers.js";
+import { redirect } from "next/navigation.js";
 import { detectOrigin } from "./env.js";
 export async function signIn(provider, options, authorizationParams, config) {
     const headers = new Headers(nextHeaders());
diff --git a/lib/index.js b/lib/index.js
index 3a16addad09746d389fd1b53d876f4dbbe035356..a0c138e90077b0a2b32b2fc7e37ce1ecb4d29a83 100644
--- a/lib/index.js
+++ b/lib/index.js
@@ -1,6 +1,6 @@
 import { Auth } from "@auth/core";
-import { headers } from "next/headers";
-import { NextResponse } from "next/server";
+import { headers } from "next/headers.js";
+import { NextResponse } from "next/server.js";
 import { detectOrigin, reqWithEnvUrl } from "./env.js";
 /** Server-side method to read the session. */
 async function getSession(headers, config) {
@@ -108,16 +108,20 @@ async function handleAuth(args, config, userMiddlewareOrRoute) {
     cloneSetCookie(sessionResponse, finalResponse);
     return finalResponse;
 }
+function setHeader(res, append, name, value) {
+    if (res.headers) res.headers[append ? "append" : "set"](name, value);
+    else res[append ? "appendHeader" : "setHeader"](name, value);
+}
 /** Clone cookies from one response to another. */
 function cloneSetCookie(from, to) {
     const authCookies = from.headers.getSetCookie?.() ?? from.headers.get("set-cookie");
     if (!authCookies?.length)
         return;
     if (Array.isArray(authCookies)) {
-        authCookies.forEach((cookie) => to.headers.append("set-cookie", cookie));
+        authCookies.forEach((cookie) => setHeader(to, true, "set-cookie", cookie));
     }
     else {
-        to.headers.set("set-cookie", authCookies);
+        setHeader(to, false, "set-cookie", authCookies);
     }
 }
 function isSameAuthAction(requestPath, redirectPath, config) {
